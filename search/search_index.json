{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Neucore Documentation","text":"<p>Neucore is a modern AI framework for building context-aware AI applications with advanced reasoning capabilities. It provides a structured approach to implementing different reasoning methods, managing context, and extending functionality through plugins.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<ul> <li>Installation and Setup - Quick installation and basic usage examples</li> <li>API Reference - Complete API documentation for developers</li> </ul>"},{"location":"#key-features","title":"Key Features","text":"Advanced Reasoning <p>Multiple reasoning methods including Chain of Thought, Socratic, Dialogic, and One Shot approaches.</p> Reasoning  Plugin Architecture <p>Extensible plugin system for customizing and enhancing functionality.</p> Plugin System  Context Management <p>Built-in memory and context management for maintaining state.</p> API Reference  Flexible Integration <p>Easy integration with various LLM providers and existing applications.</p> Getting Started"},{"location":"#installation","title":"Installation","text":"<pre><code># Using npm\nnpm install neucore\n\n# Using pnpm\npnpm add neucore\n\n# Using yarn\nyarn add neucore\n</code></pre>"},{"location":"#quick-example","title":"Quick Example","text":"<pre><code>import { createNeuroCore } from 'neucore';\nimport { ReasoningMethod } from 'neucore/reasoning';\n\n// Initialize the core\nconst core = createNeuroCore();\n\n// Use reasoning capabilities\nconst result = await core.reasoning.solve({\n  problem: \"What are the key considerations for AI safety?\",\n  method: ReasoningMethod.ONE_SHOT,\n  options: {\n    temperature: 0.3\n  }\n});\n\nconsole.log(result.solution);\nconsole.log(result.confidence);\n</code></pre>"},{"location":"#additional-resources","title":"Additional Resources","text":"<ul> <li>GitHub Repository</li> <li>Version History</li> <li>License</li> </ul>"},{"location":"api/","title":"API Reference","text":"<p>This page provides an overview of the Neucore API and links to detailed class and method documentation.</p>   -   :material-code-array: **Core API**      ---      Base functionality and interfaces for working with the Neucore framework.      [View Core API](./api-docs/modules.html)  -   :material-brain: **Reasoning System**      ---      Classes and interfaces for implementing reasoning capabilities.      [View Reasoning API](./api-docs/modules/core_reasoning.html)  -   :material-puzzle: **Plugin System**      ---      Plugin architecture documentation for extending Neucore.      [View Plugin API](./api-docs/modules/core_plugins.html)  -   :material-message-processing: **MCP System**      ---      Message Control Protocol implementation details.      [View MCP API](./api-docs/modules/mcp.html)"},{"location":"api/#complete-api-reference","title":"Complete API Reference","text":"<p>For complete API documentation including class hierarchies, interfaces, and method signatures:</p> <p>View Full API Documentation</p>"},{"location":"api/#core-components","title":"Core Components","text":""},{"location":"api/#reasoning-system","title":"Reasoning System","text":"<p>The reasoning system provides structured approaches to problem-solving:</p> <pre><code>import { createNeuroCore, ReasoningMethod } from 'neucore';\n\nconst core = createNeuroCore();\n\n// Using the reasoning system with different methods\nconst result = await core.reasoning.solve({\n  problem: \"What is the capital of France?\",\n  method: ReasoningMethod.ONE_SHOT // Can be CHAIN_OF_THOUGHT, SOCRATIC, DIALOGIC, etc.\n});\n\nconsole.log(result.solution);\n</code></pre>"},{"location":"api/#plugin-system","title":"Plugin System","text":"<p>The plugin system enables extending Neucore with custom functionality:</p> <pre><code>import { createPlugin } from 'neucore';\n\nconst myPlugin = createPlugin({\n  name: 'my-plugin',\n  version: '1.0.0',\n\n  initialize: async (context, config) =&gt; {\n    // Plugin initialization logic\n    return { success: true };\n  },\n\n  handlers: {\n    myAction: async (params, context) =&gt; {\n      // Custom handler implementation\n      return { result: 'Success!' };\n    }\n  }\n});\n\nexport default myPlugin;\n</code></pre>"},{"location":"api/#type-definitions","title":"Type Definitions","text":"<p>TypeScript interfaces and type definitions are fully documented in the API reference. Key types include:</p> <ul> <li><code>ReasoningMethod</code> - Enum of available reasoning approaches</li> <li><code>ReasoningGraph</code> - Graph representation of the reasoning process</li> <li><code>IPlugin</code> - Interface for plugin implementation</li> <li><code>IMCPHandler</code> - Interface for Message Control Protocol handlers</li> </ul>"},{"location":"api/#versioning","title":"Versioning","text":"<p>Neucore follows semantic versioning. API stability is maintained within major versions, with breaking changes only introduced in major version updates. </p>"},{"location":"getting-started/","title":"Getting Started with Neucore","text":"<p>This guide will help you get started with Neucore, a modern AI framework for building context-aware AI applications.</p>"},{"location":"getting-started/#installation","title":"Installation","text":"<pre><code># Using npm\nnpm install neucore\n\n# Using pnpm\npnpm add neucore\n\n# Using yarn\nyarn add neucore\n</code></pre>"},{"location":"getting-started/#basic-usage","title":"Basic Usage","text":"<pre><code>import { createNeuroCore } from 'neucore';\n\n// Initialize the core with default configuration\nconst core = createNeuroCore();\n\n// Use reasoning capabilities\nconst result = await core.reasoning.solve({\n  problem: \"What is the capital of France?\",\n  method: \"ONE_SHOT\" // Our new reasoning method!\n});\n\nconsole.log(result.solution); // \"Paris\"\n</code></pre>"},{"location":"getting-started/#configuration","title":"Configuration","text":"<p>You can configure Neucore with custom options:</p> <pre><code>import { createNeuroCore } from 'neucore';\n\nconst core = createNeuroCore({\n  providers: {\n    anthropic: {\n      apiKey: process.env.ANTHROPIC_API_KEY,\n      defaultModel: \"claude-3-sonnet-20240229\"\n    }\n  },\n  plugins: [\n    // Add your custom plugins here\n  ],\n  memory: {\n    // Memory configuration\n  },\n  context: {\n    // Context configuration\n  }\n});\n</code></pre>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<p>Once you've set up Neucore, you might want to explore:</p> <ul> <li>Reasoning - Learn about different reasoning methods</li> <li>Plugin System - Extend functionality with plugins</li> <li>API Reference - Detailed API documentation </li> </ul>"},{"location":"plugins/","title":"Plugin System","text":"<p>Neucore includes a powerful plugin system that allows extending the framework's capabilities without modifying the core code.</p>"},{"location":"plugins/#plugin-architecture","title":"Plugin Architecture","text":"<p>Plugins in Neucore follow a consistent structure:</p> <ul> <li>Metadata: Name, version, description</li> <li>Initialization: Setup code that runs when the plugin is registered</li> <li>Handlers: Functions that implement the plugin's functionality</li> <li>Configuration: Optional plugin-specific settings</li> </ul>"},{"location":"plugins/#available-plugins","title":"Available Plugins","text":"<p>Neucore comes with several built-in plugins:</p> <ul> <li>Reasoning Plugin - Provides reasoning capabilities </li> <li>Template Plugin - For templating system integration</li> <li>Relationship Plugin - Manages entity relationships</li> <li>Memory Plugin - Handles persistence and retrieval</li> </ul>"},{"location":"plugins/#creating-custom-plugins","title":"Creating Custom Plugins","text":"<p>To create a plugin for Neucore, you need to implement the plugin interface:</p> <pre><code>import { createPlugin } from 'neucore';\n\nconst myPlugin = createPlugin({\n  name: 'my-plugin',\n  version: '1.0.0',\n  description: 'My custom plugin for Neucore',\n\n  // Plugin initialization\n  initialize: async (context, config) =&gt; {\n    // Setup code here\n    return { success: true };\n  },\n\n  // Plugin handlers\n  handlers: {\n    // Custom handler functions\n    myAction: async (params, context) =&gt; {\n      // Handler implementation\n      return { result: 'Action completed!' };\n    }\n  }\n});\n\nexport default myPlugin;\n</code></pre>"},{"location":"plugins/#loading-plugins","title":"Loading Plugins","text":"<p>You can load plugins when creating the core instance:</p> <pre><code>import { createNeuroCore } from 'neucore';\nimport myPlugin from './plugins/my-plugin';\n\nconst core = createNeuroCore({\n  plugins: [\n    myPlugin\n  ],\n  pluginOptions: {\n    // Plugin-specific configuration\n    'my-plugin': {\n      optionA: 'value',\n      optionB: true\n    }\n  }\n});\n</code></pre>"},{"location":"plugins/#plugin-capabilities","title":"Plugin Capabilities","text":"<p>Plugins can:</p> <ul> <li>Add new methods to the core API</li> <li>Implement custom reasoning methods</li> <li>Provide integrations with external services</li> <li>Add new template types and functions</li> <li>Define custom validation rules</li> <li>Implement specialized memory handlers </li> </ul>"},{"location":"reasoning/","title":"Neucore Reasoning System","text":"<p>The Neucore Reasoning System provides a structured approach to AI reasoning through different reasoning methods that enhance decision-making and planning capabilities.</p>"},{"location":"reasoning/#available-reasoners","title":"Available Reasoners","text":"<p>Neucore provides several reasoning methods to address different needs:</p> <ul> <li>Chain of Thought - Step-by-step reasoning approach</li> <li>Socratic - Query-based reasoning through questions</li> <li>Dialogic - Reasoning through constructive dialog</li> <li>One Shot - Direct reasoning without multiple steps</li> </ul>"},{"location":"reasoning/#core-components","title":"Core Components","text":""},{"location":"reasoning/#reasoning-graph","title":"Reasoning Graph","text":"<p>The reasoning process is represented as a graph with nodes (reasoning steps) and edges (connections between steps): - Nodes: Individual reasoning steps (observations, analyses, inferences, etc.) - Edges: Relationships between reasoning steps</p>"},{"location":"reasoning/#reasoner-interface","title":"Reasoner Interface","text":"<p>All reasoners implement a common interface (<code>IReasoner</code>) with these operations: - <code>getMethod()</code>: Returns the reasoning method type - <code>reason(query, options)</code>: Performs reasoning on a query - <code>continueReasoning(graph, options)</code>: Continues reasoning from an existing graph - <code>setProgressCallback(callback)</code>: Sets a callback for progress updates</p>"},{"location":"reasoning/#example-usage","title":"Example Usage","text":"<pre><code>import { createNeuroCore } from 'neucore';\nimport { ReasoningMethod } from 'neucore/reasoning';\n\nconst core = createNeuroCore();\n\n// Use the reasoning system\nconst result = await core.reasoning.solve({\n  problem: \"What are the ethical implications of AI in healthcare?\",\n  method: ReasoningMethod.CHAIN_OF_THOUGHT,\n  options: {\n    temperature: 0.7,\n    maxDepth: 5\n  }\n});\n\nconsole.log(result.solution);\nconsole.log(result.confidence);\n</code></pre> <p>For more detailed information, see the API documentation section. </p>"},{"location":"reasoning/chain-of-thought/","title":"Chain of Thought Reasoner","text":"<p>The Chain of Thought reasoner breaks down complex problems into sequential steps, explicitly tracking the line of reasoning that leads to a solution. By making each logical step visible, it creates a transparent reasoning process that's easy to follow, validate, and debug.</p> <p>Ideal for Step-by-Step Problem Solving</p> <p>Chain of Thought excels at problems with clear logical structure that benefit from methodical decomposition, such as mathematical calculations, logical deductions, or multi-stage analyses.</p>"},{"location":"reasoning/chain-of-thought/#key-features","title":"Key Features","text":"<ul> <li>Sequential reasoning - Breaks problems into ordered steps</li> <li>Explicit intermediate conclusions - Captures key insights at each stage</li> <li>Structured thought process - Creates clear, traceable reasoning paths </li> <li>Error detection - Makes it easier to identify flawed assumptions or calculation errors</li> <li>Self-correction - Can revise earlier steps when needed</li> </ul>"},{"location":"reasoning/chain-of-thought/#when-to-use","title":"When to Use","text":"<p>Chain of Thought reasoning is particularly effective for:</p> <ul> <li>Mathematical or quantitative problems</li> <li>Multi-step logical deductions</li> <li>Planning tasks requiring sequential steps</li> <li>Debugging thought processes</li> <li>Explaining complex reasoning to others</li> </ul>"},{"location":"reasoning/chain-of-thought/#basic-usage","title":"Basic Usage","text":"<pre><code>import { createNeuroCore } from 'neucore';\nimport { ReasoningMethod } from 'neucore/reasoning';\n\nconst core = createNeuroCore();\n\n// Using the Chain of Thought reasoner\nconst result = await core.reasoning.solve({\n  problem: \"A store has a 25% off sale. If an item originally costs $120, what is the final price after applying a 10% coupon to the already discounted price?\",\n  method: ReasoningMethod.CHAIN_OF_THOUGHT,\n  options: {\n    temperature: 0.1 // Lower temperature for more deterministic reasoning\n  }\n});\n\nconsole.log(result.solution); // Final answer\nconsole.log(result.steps); // Intermediate steps in the reasoning process\n</code></pre>"},{"location":"reasoning/chain-of-thought/#advanced-configuration","title":"Advanced Configuration","text":"<p>The Chain of Thought reasoner supports several configuration options:</p> <pre><code>const result = await core.reasoning.solve({\n  problem: \"What would be the environmental impact if all passenger cars in the US switched to electric by 2030?\",\n  method: ReasoningMethod.CHAIN_OF_THOUGHT,\n  options: {\n    temperature: 0.2,\n    methodOptions: {\n      model: \"gpt-4o\",                // Specific model to use\n      maxSteps: 10,                   // Maximum number of reasoning steps\n      verifySteps: true,              // Double-check each step for errors\n      explicitAssumptions: true,      // Clearly state assumptions made\n      exploreAlternatives: true,      // Consider different approaches\n      quantifyUncertainty: true,      // Acknowledge confidence levels\n      citeSources: false,             // Don't require source citations\n      detailedExplanations: true      // Provide thorough explanations\n    }\n  }\n});\n</code></pre>"},{"location":"reasoning/chain-of-thought/#implementation-details","title":"Implementation Details","text":""},{"location":"reasoning/chain-of-thought/#reasoning-graph-structure","title":"Reasoning Graph Structure","text":"<p>The Chain of Thought reasoner produces a structured reasoning graph with:</p> <ol> <li>The problem statement node (type: <code>ReasoningNodeType.QUESTION</code>)</li> <li>Multiple reasoning step nodes (type: <code>ReasoningNodeType.INFERENCE</code>)</li> <li>A solution node with the final answer (type: <code>ReasoningNodeType.INFERENCE</code>)</li> </ol> <p>Each inference node builds upon previous nodes, creating a linear chain of reasoning that can be easily traced from start to finish.</p>"},{"location":"reasoning/chain-of-thought/#prompting-approach","title":"Prompting Approach","text":"<p>The Chain of Thought reasoner uses specialized prompts that:</p> <ul> <li>Request explicit step-by-step thinking</li> <li>Encourage showing all relevant calculations</li> <li>Guide toward checking work at critical junctures</li> <li>Support reconsidering earlier steps when needed</li> <li>Emphasize clarity and precision in each step</li> </ul>"},{"location":"reasoning/chain-of-thought/#refinement-process","title":"Refinement Process","text":"<p>When using the <code>continueReasoning</code> method, the Chain of Thought reasoner can:</p> <ol> <li>Extend the reasoning chain with additional steps</li> <li>Revise earlier steps that contain errors or flawed assumptions</li> <li>Explore alternative solution paths</li> <li>Add more detailed explanations for complex steps</li> <li>Verify the final conclusion with additional checks</li> </ol>"},{"location":"reasoning/chain-of-thought/#comparison-with-other-reasoners","title":"Comparison with Other Reasoners","text":"Feature Chain of Thought Dialogic Socratic One Shot Structure Linear Debate Tree/Graph Direct Transparency High High Very High Low Reasoning Style Sequential Adversarial Exploratory Direct Best For Step-by-step problems Competing viewpoints Deep exploration Simple queries Token Usage Medium Highest High Lowest"},{"location":"reasoning/chain-of-thought/#example-reasoning-output","title":"Example Reasoning Output","text":"<p>Below is an example of the output structure produced by the Chain of Thought reasoner:</p> <pre><code>Problem: A store has a 25% off sale. If an item originally costs $120, what is the final price after applying a 10% coupon to the already discounted price?\n\nStep 1: Calculate the price after the 25% discount.\nDiscount amount = $120 \u00d7 0.25 = $30\nPrice after discount = $120 - $30 = $90\n\nStep 2: Calculate the price after applying the 10% coupon to the discounted price.\nCoupon discount = $90 \u00d7 0.10 = $9\nFinal price = $90 - $9 = $81\n\nSolution: The final price after both the 25% sale discount and the 10% coupon is $81.\n</code></pre> <p>Here's another example demonstrating more complex reasoning:</p> <pre><code>Problem: What would be the environmental impact if all passenger cars in the US switched to electric by 2030?\n\nStep 1: Establish key facts about the current US passenger car fleet.\n- There are approximately 250 million registered passenger vehicles in the US\n- The average US passenger vehicle emits about\n  4.6 metric tons of CO2 per year\n- The average lifespan of a car is around 12 years\n- Current EV adoption is approximately 1-2% of new car sales\n\nStep 2: Calculate current emissions from passenger vehicles.\nTotal annual CO2 emissions = 250 million cars \u00d7 4.6 tons CO2/car\n                          = 1.15 billion tons of CO2 per year\n\nStep 3: Consider electricity generation for EVs.\n- EVs require electricity which currently comes from a mix of sources\n- US electricity generation mix (approximate): 40% natural gas, 20% coal, 20% nuclear, 20% renewables\n- EVs are more energy-efficient than internal combustion vehicles\n- The carbon intensity of electricity varies by region\n\nStep 4: Estimate emissions reduction.\n- Direct vehicle emissions would approach zero\n- Electricity generation emissions would increase\n- Based on current electricity mix, EVs typically produce 60-70% less lifecycle emissions than gas vehicles\n- Potential reduction = 1.15 billion \u00d7 0.65 = approximately 750 million tons CO2 annually\n\nStep 5: Consider other environmental factors.\n- Battery production has significant environmental impacts (mining, manufacturing)\n- Increased demand for materials like lithium, cobalt, and rare earth elements\n- Reduced air pollution in urban areas (NOx, particulates)\n- Noise pollution reduction\n- End-of-life battery recycling challenges and opportunities\n\nStep 6: Assess practical constraints.\n- Charging infrastructure requirements would be extensive\n- Electricity grid upgrades would be necessary\n- Manufacturing capacity would need dramatic scaling\n- The transition timeline (by 2030) is highly aggressive\n- Complete conversion by 2030 is likely unrealistic\n\nSolution: A complete transition to EVs by 2030 would potentially reduce direct CO2 emissions by approximately 750 million tons annually based on the current electricity mix, with greater reductions as the grid becomes cleaner. However, such a rapid transition faces significant practical constraints in manufacturing capacity and infrastructure development. The environmental benefits would include substantial reductions in urban air pollution and noise, but would be partially offset by increased environmental impacts from battery production and material extraction. A more realistic timeline would involve a gradual transition extending well beyond 2030, with environmental benefits increasing as both vehicle technology and the electricity grid become cleaner.\n</code></pre>"},{"location":"reasoning/chain-of-thought/#related-resources","title":"Related Resources","text":"<ul> <li>Getting Started</li> <li>API Reference</li> <li>One Shot Reasoner</li> <li>Dialogic Reasoner</li> <li>Socratic Reasoner </li> </ul>"},{"location":"reasoning/dialogic/","title":"Dialogic Reasoner","text":"<p>The Dialogic reasoner uses a structured debate format to examine topics from multiple perspectives. It simulates a conversation between different viewpoints, uncovering nuanced insights through constructive argumentation.</p> <p>Excellent for Complex Dilemmas</p> <p>Ideal for issues with competing viewpoints, ethical dilemmas, or decisions requiring careful consideration of tradeoffs.</p>"},{"location":"reasoning/dialogic/#key-features","title":"Key Features","text":"<ul> <li>Multi-perspective analysis - Examines issues from contrasting viewpoints</li> <li>Structured debate - Follows established argumentation formats</li> <li>Balanced consideration - Gives fair treatment to opposing positions</li> <li>Assumption surfacing - Reveals implicit assumptions through dialogue</li> <li>Managed disagreement - Produces insight through constructive opposition</li> </ul>"},{"location":"reasoning/dialogic/#when-to-use","title":"When to Use","text":"<p>The Dialogic reasoner is especially effective for:</p> <ul> <li>Problems with legitimate competing perspectives</li> <li>Policy or ethical dilemmas with meaningful tradeoffs</li> <li>Situations requiring thorough examination of pros and cons</li> <li>Issues where stakeholder viewpoints significantly differ</li> <li>Topics prone to confirmation bias or one-sided analysis</li> </ul>"},{"location":"reasoning/dialogic/#basic-usage","title":"Basic Usage","text":"<pre><code>import { createNeuroCore } from 'neucore';\nimport { ReasoningMethod } from 'neucore/reasoning';\n\nconst core = createNeuroCore();\n\nconst result = await core.reasoning.solve({\n  problem: \"Should social media platforms be legally responsible for user-posted content?\",\n  method: ReasoningMethod.DIALOGIC,\n  options: {\n    temperature: 0.2 // Lower temperature for more grounded debates\n  }\n});\n\nconsole.log(result.solution); // The synthesized conclusion\nconsole.log(result.debate); // The full debate transcript with all arguments\n</code></pre>"},{"location":"reasoning/dialogic/#advanced-configuration","title":"Advanced Configuration","text":"<pre><code>const result = await core.reasoning.solve({\n  problem: \"Is universal basic income a viable economic policy?\",\n  method: ReasoningMethod.DIALOGIC,\n  options: {\n    temperature: 0.3,\n    methodOptions: {\n      model: \"gpt-4o\",            // Specific model to use\n      debateStructure: \"formal\",  // 'formal', 'socratic', or 'adversarial'\n      perspectives: [             // Specific viewpoints to include\n        \"economist\",\n        \"social policy expert\",\n        \"automation researcher\",\n        \"fiscal conservative\"\n      ],\n      rounds: 3,                  // Number of debate rounds\n      requireEvidence: true,      // Require supporting evidence for claims\n      focusAreas: [               // Key aspects to address\n        \"economic feasibility\",\n        \"social impacts\",\n        \"implementation challenges\"\n      ],\n      steelmanArguments: true     // Present strongest version of each position\n    }\n  }\n});\n</code></pre>"},{"location":"reasoning/dialogic/#implementation-details","title":"Implementation Details","text":""},{"location":"reasoning/dialogic/#reasoning-graph-structure","title":"Reasoning Graph Structure","text":"<p>The Dialogic reasoner produces a debate-structured reasoning graph with:</p> <ol> <li>Problem statement node (type: <code>ReasoningNodeType.QUESTION</code>)</li> <li>Perspective nodes representing different viewpoints (type: <code>ReasoningNodeType.PERSPECTIVE</code>)</li> <li>Argument nodes connected to each perspective (type: <code>ReasoningNodeType.ARGUMENT</code>)</li> <li>Counterargument nodes connecting opposing arguments (type: <code>ReasoningNodeType.COUNTERARGUMENT</code>)</li> <li>Evidence nodes supporting arguments (type: <code>ReasoningNodeType.EVIDENCE</code>)</li> <li>Synthesis node integrating key insights (type: <code>ReasoningNodeType.SYNTHESIS</code>)</li> </ol> <p>This structure enables thorough exploration while maintaining clear relationships between arguments.</p>"},{"location":"reasoning/dialogic/#prompting-approach","title":"Prompting Approach","text":"<p>The Dialogic reasoner uses specialized prompts that:</p> <ul> <li>Create distinct personas for each perspective</li> <li>Structure exchanges as formal debate rounds</li> <li>Encourage charitable interpretation of opposing views</li> <li>Require evidence and reasoning for assertions</li> <li>Guide toward identifying points of agreement and core disagreements</li> </ul>"},{"location":"reasoning/dialogic/#refinement-process","title":"Refinement Process","text":"<p>When using the <code>continueReasoning</code> method, the Dialogic reasoner can:</p> <ol> <li>Initiate additional debate rounds on unresolved issues</li> <li>Request specific evidence for contested claims</li> <li>Identify and explore emerging areas of consensus</li> <li>Deepen discussion on significant points of contention</li> <li>Produce more nuanced synthesis incorporating additional perspectives</li> </ol>"},{"location":"reasoning/dialogic/#comparison-with-other-reasoners","title":"Comparison with Other Reasoners","text":"Feature Dialogic Chain of Thought Socratic One Shot Structure Debate Linear Questioning Tree Direct Transparency High High Very High Low Reasoning Style Adversarial Sequential Exploratory Direct Best For Competing viewpoints Step-by-step problems Deep exploration Simple queries Token Usage Highest Medium High Lowest"},{"location":"reasoning/dialogic/#example-output","title":"Example Output","text":"<pre><code>Problem: Should social media platforms be legally responsible for user-posted content?\n\nPerspective 1 (Platform Responsibility Advocate):\nSocial media platforms should bear legal responsibility for user content because they actively profit from engagement with all content, including harmful material. These companies already employ algorithmic curation that promotes certain content over others, demonstrating their capability to monitor and control what appears on their platforms. Legal accountability would create necessary incentives for platforms to invest in more robust content moderation systems and would address the current asymmetry where platforms enjoy the financial benefits of user engagement while society bears the costs of harmful content. Several jurisdictions, including the EU with its Digital Services Act, have already moved toward greater platform accountability without collapsing the business model of social media.\n\nPerspective 2 (Free Expression Defender):\nHolding platforms legally responsible for all user content would severely chill free expression online. The sheer volume of content\u2014approximately 500 hours of video uploaded to YouTube every minute, for example\u2014makes perfect moderation technically impossible. Platforms would be forced to implement overly aggressive content filtering, inevitably removing legitimate speech in an effort to avoid liability. Section 230 of the Communications Decency Act was specifically designed to protect open internet communication while still allowing platforms to moderate content voluntarily. Additionally, platform liability would disproportionately harm smaller platforms that cannot afford sophisticated moderation systems, further entrenching the dominance of tech giants.\n\n[Additional debate rounds omitted for brevity]\n\nSolution: The question of social media platform liability for user content presents legitimate concerns on both sides. A nuanced approach that avoids both complete immunity and full publisher liability appears optimal. This middle path might include: (1) targeted legal responsibility for specific categories of clearly illegal content (after notification and with reasonable time to respond); (2) safe harbor provisions that protect platforms following good-faith moderation practices; (3) transparency requirements regarding content policies and enforcement; (4) procedural accountability ensuring users can appeal moderation decisions; and (5) regulatory distinction based on platform size and resources. This framework acknowledges that while perfect content moderation is impossible, platforms should have proportional responsibility for creating and maintaining reasonably safe environments without fundamentally undermining free expression or open communication. Implementation would require careful legislative crafting with input from diverse stakeholders to balance competing values of expression, safety, innovation, and accountability.\n</code></pre>"},{"location":"reasoning/dialogic/#related-resources","title":"Related Resources","text":"<ul> <li>Getting Started</li> <li>API Reference</li> <li>One Shot Reasoner</li> <li>Chain of Thought Reasoner</li> <li>Socratic Reasoner </li> </ul>"},{"location":"reasoning/one-shot/","title":"One Shot Reasoner","text":"<p>The One Shot reasoner provides direct, immediate responses to problems without intermediate reasoning steps. It delivers efficient solutions for straightforward queries where elaborate exploration isn't necessary.</p> <p>Optimal for Simple Queries</p> <p>One Shot reasoning excels at handling straightforward questions, providing quick responses when speed and efficiency are priorities.</p>"},{"location":"reasoning/one-shot/#key-features","title":"Key Features","text":"<ul> <li>Maximum efficiency - Delivers answers with minimal token usage</li> <li>Direct approach - Proceeds straight to solution without intermediate steps</li> <li>Simplicity - Minimizes complexity in both implementation and output</li> <li>Speed - Provides fastest response times of all reasoning methods</li> <li>Conciseness - Produces focused, to-the-point solutions</li> </ul>"},{"location":"reasoning/one-shot/#when-to-use","title":"When to Use","text":"<p>One Shot reasoning is particularly effective for:</p> <ul> <li>Simple, well-defined questions with clear answers</li> <li>Factual queries requiring minimal reasoning</li> <li>Time-sensitive applications requiring rapid responses</li> <li>Low-complexity tasks with straightforward solutions</li> <li>Applications with strict token usage constraints</li> </ul>"},{"location":"reasoning/one-shot/#basic-usage","title":"Basic Usage","text":"<pre><code>import { createNeuroCore } from 'neucore';\nimport { ReasoningMethod } from 'neucore/reasoning';\n\nconst core = createNeuroCore();\n\n// Using the One Shot reasoner\nconst result = await core.reasoning.solve({\n  problem: \"What is the capital of France?\",\n  method: ReasoningMethod.ONE_SHOT,\n  options: {\n    temperature: 0.1 // Lower temperature for more deterministic responses\n  }\n});\n\nconsole.log(result.solution); // The direct answer\n</code></pre>"},{"location":"reasoning/one-shot/#advanced-configuration","title":"Advanced Configuration","text":"<p>The One Shot reasoner supports basic configuration options:</p> <pre><code>const result = await core.reasoning.solve({\n  problem: \"Summarize the key benefits of serverless architecture\",\n  method: ReasoningMethod.ONE_SHOT,\n  options: {\n    temperature: 0.2,\n    methodOptions: {\n      model: \"gpt-4o\",            // Specific model to use\n      maxTokens: 200,             // Limit response length\n      formatInstructions: \"Provide a concise, bulleted list of the top 5 benefits\",\n      includeCitations: false,    // Don't include references\n      outputStyle: \"concise\"      // Keep response brief\n    }\n  }\n});\n</code></pre>"},{"location":"reasoning/one-shot/#implementation-details","title":"Implementation Details","text":""},{"location":"reasoning/one-shot/#reasoning-graph-structure","title":"Reasoning Graph Structure","text":"<p>The One Shot reasoner produces a minimal reasoning graph with just two components:</p> <ol> <li>The problem statement node (type: <code>ReasoningNodeType.QUESTION</code>)</li> <li>A single solution node (type: <code>ReasoningNodeType.INFERENCE</code>)</li> </ol> <p>This simple linear structure reflects the direct approach of the One Shot method.</p>"},{"location":"reasoning/one-shot/#prompting-approach","title":"Prompting Approach","text":"<p>The One Shot reasoner uses streamlined prompts that:</p> <ul> <li>Emphasize direct responses without showing work</li> <li>Discourage unnecessary elaboration or step-by-step reasoning</li> <li>Focus on conciseness and precision</li> <li>Request only the essential information needed to answer the query</li> </ul>"},{"location":"reasoning/one-shot/#refinement-process","title":"Refinement Process","text":"<p>When using the <code>continueReasoning</code> method, the One Shot reasoner can:</p> <ol> <li>Provide clarification on the initial response</li> <li>Add specific requested details to the original answer</li> <li>Reformulate the response based on feedback</li> <li>Apply formatting changes as requested</li> <li>Address specific aspects that may have been overlooked</li> </ol>"},{"location":"reasoning/one-shot/#comparison-with-other-reasoners","title":"Comparison with Other Reasoners","text":"Feature One Shot Chain of Thought Socratic Dialogic Speed Fastest Medium Slow Slowest Structure Direct Linear Tree/Graph Debate Depth Lowest Medium Highest High Token Usage Lowest Medium High Highest Best For Simple queries Sequential problems Deep exploration Competing viewpoints"},{"location":"reasoning/one-shot/#example-reasoning-output","title":"Example Reasoning Output","text":"<p>Below is an example of the output structure produced by the One Shot reasoner:</p> <pre><code>Problem: What is the capital of France?\n\nSolution: Paris\n</code></pre> <pre><code>Problem: Summarize the key benefits of serverless architecture\n\nSolution:\n\u2022 No infrastructure management - focus on code, not servers\n\u2022 Automatic scaling based on demand\n\u2022 Cost efficiency - pay only for execution time\n\u2022 Reduced time-to-market with simpler deployment\n\u2022 Built-in high availability and fault tolerance\n</code></pre>"},{"location":"reasoning/one-shot/#related-resources","title":"Related Resources","text":"<ul> <li>Getting Started</li> <li>API Reference</li> <li>Chain of Thought Reasoner</li> <li>Socratic Reasoner</li> <li>Dialogic Reasoner </li> </ul>"},{"location":"reasoning/socratic/","title":"Socratic Reasoner","text":"<p>The Socratic reasoner uses systematic questioning to explore problems deeply, uncovering underlying assumptions, testing hypotheses, and refining knowledge through iterative inquiry. It mimics the Socratic method's approach of guided discovery through sequential questions and answers.</p> <p>Powerful for Deep Exploration</p> <p>Socratic reasoning excels at situations requiring thorough examination of complex topics, challenging assumptions, and reaching nuanced understanding through guided exploration.</p>"},{"location":"reasoning/socratic/#key-features","title":"Key Features","text":"<ul> <li>Questioning approach - Uses targeted questions to guide reasoning</li> <li>Assumption testing - Identifies and examines underlying assumptions</li> <li>Depth over breadth - Probes deeply into core issues</li> <li>Hypothesis refinement - Iteratively improves understanding</li> <li>Critical thinking - Challenges initial beliefs to reach better conclusions</li> </ul>"},{"location":"reasoning/socratic/#when-to-use","title":"When to Use","text":"<p>Socratic reasoning is particularly effective for:</p> <ul> <li>Complex problems with hidden assumptions</li> <li>Deeply exploring unfamiliar domains</li> <li>Challenging established thinking</li> <li>Teaching and learning scenarios</li> <li>Ethical or philosophical inquiries</li> </ul>"},{"location":"reasoning/socratic/#basic-usage","title":"Basic Usage","text":"<pre><code>import { createNeuroCore } from 'neucore';\nimport { ReasoningMethod } from 'neucore/reasoning';\n\nconst core = createNeuroCore();\n\n// Using the Socratic reasoner\nconst result = await core.reasoning.solve({\n  problem: \"What are the ethical implications of using AI for automated hiring decisions?\",\n  method: ReasoningMethod.SOCRATIC,\n  options: {\n    temperature: 0.3 // Higher temperature for more exploratory reasoning\n  }\n});\n\nconsole.log(result.solution); // Final conclusion\nconsole.log(result.conversation); // The full questioning sequence\n</code></pre>"},{"location":"reasoning/socratic/#advanced-configuration","title":"Advanced Configuration","text":"<p>The Socratic reasoner supports several configuration options:</p> <pre><code>const result = await core.reasoning.solve({\n  problem: \"Should cities ban private vehicles in downtown areas to reduce emissions?\",\n  method: ReasoningMethod.SOCRATIC,\n  options: {\n    temperature: 0.4,\n    methodOptions: {\n      model: \"gpt-4o\",               // Specific model to use\n      maxQuestions: 12,              // Maximum number of questions\n      questionDepth: \"high\",         // How deeply to probe (low/medium/high)\n      exploreCounterarguments: true, // Consider opposing viewpoints\n      focusAreas: [                  // Specific angles to explore\n        \"environmental impact\",\n        \"economic consequences\",\n        \"accessibility concerns\",\n        \"implementation challenges\"\n      ],\n      avoidAssumptions: true,        // Critically examine assumptions\n      requireEvidence: true          // Ask for supporting evidence\n    }\n  }\n});\n</code></pre>"},{"location":"reasoning/socratic/#implementation-details","title":"Implementation Details","text":""},{"location":"reasoning/socratic/#reasoning-graph-structure","title":"Reasoning Graph Structure","text":"<p>The Socratic reasoner produces a tree-structured reasoning graph with:</p> <ol> <li>The problem statement node (type: <code>ReasoningNodeType.QUESTION</code>)</li> <li>Multiple question nodes branching from the original problem (type: <code>ReasoningNodeType.QUESTION</code>)</li> <li>Answer nodes responding to each question (type: <code>ReasoningNodeType.INFERENCE</code>)</li> <li>Additional questions that follow from previous answers, creating exploration paths</li> <li>A synthesis node that collects insights from all paths (type: <code>ReasoningNodeType.SYNTHESIS</code>)</li> </ol> <p>This structure enables systematic exploration of multiple dimensions of a problem.</p>"},{"location":"reasoning/socratic/#prompting-approach","title":"Prompting Approach","text":"<p>The Socratic reasoner uses specialized prompts that:</p> <ul> <li>Frame incisive questions to probe for deeper understanding</li> <li>Challenge initial assumptions and surface biases</li> <li>Request clarification on unclear or ambiguous aspects</li> <li>Explore implications and consequences</li> <li>Guide toward examining evidence and counterarguments</li> </ul>"},{"location":"reasoning/socratic/#refinement-process","title":"Refinement Process","text":"<p>When using the <code>continueReasoning</code> method, the Socratic reasoner can:</p> <ol> <li>Pose additional questions to explore new angles</li> <li>Refine previous answers based on new insights</li> <li>Probe more deeply into promising areas</li> <li>Challenge inconsistencies identified in earlier responses</li> <li>Synthesize a more comprehensive conclusion</li> </ol>"},{"location":"reasoning/socratic/#comparison-with-other-reasoners","title":"Comparison with Other Reasoners","text":"Feature Socratic Chain of Thought Dialogic One Shot Structure Questioning Tree Linear Debate Direct Transparency Very High High High Low Reasoning Style Exploratory Sequential Adversarial Direct Best For Deep exploration Step-by-step problems Competing viewpoints Simple queries Token Usage High Medium Highest Lowest"},{"location":"reasoning/socratic/#example-reasoning-output","title":"Example Reasoning Output","text":"<p>Below is an example of the output structure produced by the Socratic reasoner:</p> <pre><code>Problem: What are the ethical implications of using AI for automated hiring decisions?\n\nQ1: What are the potential benefits of using AI for hiring decisions?\nA1: AI-based hiring systems could potentially reduce human biases in the selection process, process applications more efficiently, provide consistent evaluation criteria across all candidates, reduce time-to-hire, and potentially identify promising candidates that might be overlooked by traditional screening methods. They can analyze larger datasets than humans and may identify non-obvious patterns that correlate with job success.\n\nQ2: What biases might AI hiring systems perpetuate or introduce?\nA2: AI systems trained on historical hiring data may perpetuate existing biases in that data. If a company historically hired predominantly from certain demographics, the AI may learn to prefer similar candidates. AI can also introduce new biases based on proxy variables that correlate with protected characteristics, even if those characteristics aren't explicitly considered. Problems include:\n- Training data bias (reflecting historical discrimination)\n- Feature selection bias (using variables that disadvantage certain groups)\n- Algorithmic bias (models that inadvertently penalize certain characteristics)\n- Lack of contextual understanding (missing important nuances in applications)\n\nQ3: How transparent are AI hiring decisions to candidates?\nA3: Most commercial AI hiring systems operate as \"black boxes\" where candidates receive little or no explanation for why they were rejected. This lack of transparency raises several concerns:\n- Candidates cannot effectively challenge or appeal decisions\n- Companies may not understand the actual criteria being used\n- Regulatory compliance becomes difficult to verify\n- Trust in the hiring process is diminished\nSome companies are working on \"explainable AI\" for hiring, but these approaches remain limited and are not widely implemented.\n\nQ4: What regulatory frameworks exist or should exist for AI in hiring?\nA4: Current regulatory frameworks vary significantly by jurisdiction:\n- In the EU, GDPR gives candidates rights to explanation and data access\n- In the US, EEOC guidelines prohibit discriminatory hiring but specific AI regulations are still developing\n- Illinois has passed the Artificial Intelligence Video Interview Act\n- New York City passed a law requiring AI hiring tools to undergo bias audits\n\nIdeal frameworks might include mandatory transparency requirements, regular algorithmic impact assessments, rights to human review, and limitations on what types of data can be considered.\n\nQ5: Who bears responsibility when AI hiring systems make unfair or discriminatory decisions?\nA5: Responsibility potentially falls on multiple parties:\n- The company using the AI system (primary legal responsibility)\n- The developers/vendors of the AI system (potential product liability)\n- Data providers (if they supplied biased training data)\n- Regulatory bodies (failure to provide adequate oversight)\n\nCourts and legal systems are still developing frameworks for determining liability. Companies cannot simply delegate responsibility to algorithms or vendors.\n\nQ6: How might AI hiring systems affect candidate experience and labor market dynamics?\nA6: AI systems could significantly impact:\n- Candidate behaviors (optimizing for algorithmic screening rather than authentic presentation)\n- Economic opportunity distribution (potentially concentrating opportunities for those who understand or can game the systems)\n- Labor market accessibility (creating new barriers for those without digital literacy)\n- Psychological impacts (dehumanization of the hiring process)\n- Job search strategies (requiring new approaches to stand out to algorithms)\n\nSolution: AI-based hiring systems present complex ethical implications that require careful consideration. While they offer potential benefits in efficiency and consistency, they risk perpetuating or introducing biases, lack transparency, and raise questions about responsibility and accountability. Effective implementation requires robust regulatory frameworks, regular auditing for bias, transparency in decision criteria, and maintaining human oversight. Organizations must balance technological capabilities with ethical considerations, ensuring that AI augments rather than replaces human judgment in hiring processes. As these technologies evolve, ongoing assessment of their societal impact remains essential to ensure they enhance rather than undermine fairness in employment opportunities.\n</code></pre> <p>Here's another example demonstrating a different type of problem:</p> <pre><code>Problem: Should cities ban private vehicles from downtown areas to reduce emissions?\n\nQ1: What evidence exists regarding the environmental impact of banning private vehicles from downtown areas?\nA1: Several cities have implemented or tested such bans with measurable results:\n- Madrid saw a 38% reduction in nitrogen dioxide levels after restricting downtown access\n- Oslo reported a 19% reduction in carbon emissions after implementing car-free zones\n- Paris documented 15% less pollution on car-free days in the city center\n- Studies project that comprehensive bans could reduce urban transportation emissions by 20-30%\nHowever, these results vary significantly based on city design, alternative transportation options, and enforcement approaches.\n\nQ2: What economic effects might result from downtown vehicle bans?\nA2: Economic impacts are mixed and context-dependent:\n- Retail: Some cities report initial declines in retail sales (5-15%) followed by recovery or growth as pedestrian traffic increases\n- Property values: Commercial properties in pedestrianized areas often see 10-30% increases in value\n- Business costs: Delivery and logistics expenses typically increase by 15-25%\n- Tourism: Car-free areas often see 20-40% increases in tourism spending\n- Tax revenue: Changes in parking revenue must be offset by other sources\nStudies from Copenhagen, Oslo, and Barcelona suggest overall neutral to positive economic effects after adjustment periods, but specific impacts vary by industry and location.\n\nQ3: How do vehicle bans affect accessibility for different population groups?\nA3: Accessibility impacts vary significantly across demographics:\n- Elderly and disabled populations may face reduced mobility without careful accommodation\n- Lower-income workers who commute from outlying areas may bear disproportionate burdens\n- Families with young children report mixed experiences depending on alternative transport quality\n- Downtown residents generally report improved quality of life (75%+ approval in multiple surveys)\n\nThe equity of outcomes depends heavily on:\n- Quality and affordability of public transportation alternatives\n- Accommodation policies for those with mobility challenges\n- Economic support for affected businesses during transition periods\n- Exemptions for essential services and certain populations\n\nQ4: What alternatives exist to outright bans on private vehicles?\nA4: Several graduated approaches have shown promising results:\n- Congestion pricing (London reduced traffic by 15% with this approach)\n- Low-emission zones with fees for higher-polluting vehicles\n- Time-restricted access (allowing vehicles only during certain hours)\n- Gradual reduction of parking spaces while expanding pedestrian areas\n- Incentivizing electric vehicles while restricting combustion engines\n- Improved public transit combined with park-and-ride facilities\nThese alternatives may offer more flexible paths to emission reduction while addressing economic and accessibility concerns.\n\nQ5: How do residents' attitudes change after implementation of vehicle restrictions?\nA5: Attitude shifts follow consistent patterns across multiple cities:\n- Pre-implementation: Strong opposition (typically 60-70% against)\n- 6 months post-implementation: Mixed views (40-50% support)\n- 18+ months post-implementation: Strong support (65-80% in favor)\nThis pattern appeared in Stockholm, Oslo, Madrid, and other cities that tracked public opinion.\nKey factors in acceptance include:\n- Quality of implementation and alternatives provided\n- Clear communication about goals and benefits\n- Visible improvements in air quality and noise levels\n- Accommodation of essential needs and special cases\n\nQ6: What implementation challenges do cities face when restricting vehicles?\nA6: Common implementation challenges include:\n- Initial enforcement difficulties (requiring 6-12 months of consistent enforcement)\n- Technical infrastructure needs (cameras, barriers, payment systems)\n- Political resistance and potential changes in administration\n- Legal challenges from affected businesses or advocacy groups\n- Need for comprehensive transit alternatives before implementation\n- Coordination with surrounding municipalities to prevent problem-shifting\nCities that phased in restrictions gradually, with clear exemptions and strong alternatives in place first, reported smoother implementations.\n\nSolution: The question of banning private vehicles from downtown areas requires balancing environmental benefits against economic, accessibility, and implementation considerations. Evidence suggests such policies can significantly reduce emissions and ultimately gain public support, but success depends on thoughtful implementation. Rather than universal bans, cities should consider graduated approaches tailored to local contexts\u2014potentially including congestion pricing, time-restricted access, or low-emission zones. Implementation should prioritize robust public transportation alternatives, accessibility accommodations, and stakeholder engagement. The most successful approaches involve phased implementation with clear metrics for success, exemptions for essential services and those with mobility needs, and ongoing adjustment based on measured outcomes. While environmental benefits are clear, the path to achieving them must be equitable, economically sustainable, and adapted to each city's unique characteristics.\n</code></pre>"},{"location":"reasoning/socratic/#related-resources","title":"Related Resources","text":"<ul> <li>Getting Started</li> <li>API Reference</li> <li>One Shot Reasoner</li> <li>Chain of Thought Reasoner</li> <li>Dialogic Reasoner </li> </ul>"}]}